// Generated by CoffeeScript 1.6.3
(function() {
  var ActiveBallState, Ball, BallGrid, COL_COUNT, GRID_SIZE, GameState, LINE_COUNT, LINE_DIRECTIONS, MIN_LINE_LENGTH, UsualBallState;

  GRID_SIZE = 26;

  COL_COUNT = 9;

  LINE_COUNT = 9;

  LINE_DIRECTIONS = [[-1, 0], [-1, -1], [0, -1], [1, -1]];

  MIN_LINE_LENGTH = 5;

  ActiveBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setFile(gamvas.state.getCurrentState().resource.getImage('active_ball.png'));
    }
  });

  UsualBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setFile(gamvas.state.getCurrentState().resource.getImage('ball.png'));
    }
  });

  Ball = gamvas.Actor.extend({
    create: function(name, x, y) {
      this._super(name, x, y);
      this.addState(new ActiveBallState('active'));
      return this.addState(new UsualBallState('usual'), true);
    }
  });

  BallGrid = (function() {
    function BallGrid(width, height, parent) {
      var i, _i, _ref;
      this.width = width;
      this.height = height;
      this.parent = parent;
      this.container = [];
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.container.push([]);
      }
    }

    BallGrid.prototype.add = function(x, y, ball) {
      this.container[x][y] = ball;
      return this.checkLinesRemovalInPosition(x, y);
    };

    BallGrid.prototype.remove = function(x, y) {
      return this.container[x][y] = null;
    };

    BallGrid.prototype.get = function(x, y) {
      return this.container[x][y];
    };

    BallGrid.prototype.getFreePositions = function() {
      var i, j, res, _i, _j, _ref, _ref1;
      res = [];
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (!this.container[i][j]) {
            res.push([i, j]);
          }
        }
      }
      return res;
    };

    BallGrid.prototype.checkLinesRemovalInPosition = function(x, y) {
      var dirCount, dx, dy, line, linesToRemove, oppositeDirCount, startX, startY, totalCount, _i, _j, _len, _len1, _ref, _results;
      linesToRemove = [];
      for (_i = 0, _len = LINE_DIRECTIONS.length; _i < _len; _i++) {
        _ref = LINE_DIRECTIONS[_i], dx = _ref[0], dy = _ref[1];
        dirCount = this.getMaxBallCount(x, y, dx, dy);
        oppositeDirCount = this.getMaxBallCount(x, y, -dx, -dy);
        totalCount = dirCount + oppositeDirCount + 1;
        if (totalCount < MIN_LINE_LENGTH) {
          continue;
        }
        startX = x + dx * dirCount;
        startY = y + dy * dirCount;
        linesToRemove.push([startX, startY, -dx, -dy, totalCount]);
      }
      _results = [];
      for (_j = 0, _len1 = linesToRemove.length; _j < _len1; _j++) {
        line = linesToRemove[_j];
        _results.push(this.removeLine.apply(this, line));
      }
      return _results;
    };

    BallGrid.prototype.getMaxBallCount = function(x, y, dx, dy) {
      var res;
      res = 0;
      x += dx;
      y += dy;
      while ((0 <= x && x < this.width) && (0 <= y && y < this.height) && this.container[x][y]) {
        res++;
        x += dx;
        y += dy;
      }
      return res;
    };

    BallGrid.prototype.removeLine = function(startX, startY, dx, dy, count) {
      var curX, curY, i, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        if (typeof curX !== "undefined" && curX !== null) {
          curX += dx;
        } else {
          curX = startX;
        }
        if (typeof curY !== "undefined" && curY !== null) {
          curY += dy;
        } else {
          curY = startY;
        }
        _results.push(this.parent.removeBall(curX, curY));
      }
      return _results;
    };

    return BallGrid;

  })();

  GameState = gamvas.State.extend({
    init: function() {
      this.gridPosClicks = [];
      this.grid = new BallGrid(COL_COUNT, LINE_COUNT, this);
      this.addRandomBalls(5);
      return this.camera.setPosition(GRID_SIZE * COL_COUNT / 2, GRID_SIZE * LINE_COUNT / 2);
    },
    addRandomBalls: function(num) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= num ? _i <= num : _i >= num; i = 1 <= num ? ++_i : --_i) {
        _results.push(this.addRandomBall());
      }
      return _results;
    },
    addRandomBall: function() {
      var freePositions, posIndex, x, y, _ref;
      freePositions = this.grid.getFreePositions();
      posIndex = Math.floor(Math.random() * freePositions.length);
      _ref = freePositions[posIndex], x = _ref[0], y = _ref[1];
      return this.addBall(x, y);
    },
    addBall: function(x, y) {
      var ball, screenX, screenY, _ref;
      _ref = this.getScreenPos(x, y), screenX = _ref[0], screenY = _ref[1];
      ball = new Ball(false, screenX, screenY);
      this.addActor(ball);
      return this.grid.add(x, y, ball);
    },
    draw: function() {
      var ball, pos, x, y, _i, _len, _ref;
      _ref = this.gridPosClicks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos = _ref[_i];
        x = pos[0], y = pos[1];
        if (ball = this.grid.get(x, y)) {
          this.setActiveBall(ball);
        } else if (this.activeBall) {
          this.setBallPos(this.activeBall, x, y);
          this.setActiveBall(null);
          this.addRandomBalls(3);
        }
      }
      return this.gridPosClicks = [];
    },
    setActiveBall: function(ball) {
      var _ref;
      if ((_ref = this.activeBall) != null) {
        _ref.setState('usual');
      }
      this.activeBall = ball;
      return ball != null ? ball.setState('active') : void 0;
    },
    setBallPos: function(ball, x, y) {
      var oldX, oldY, screenX, screenY, _ref, _ref1;
      _ref = this.getGridPos(ball.position.x, ball.position.y), oldX = _ref[0], oldY = _ref[1];
      this.grid.remove(oldX, oldY);
      _ref1 = this.getScreenPos(x, y), screenX = _ref1[0], screenY = _ref1[1];
      ball.setPosition(screenX, screenY);
      return this.grid.add(x, y, ball);
    },
    getGridPos: function(x, y) {
      x = Math.floor(x / GRID_SIZE);
      y = Math.floor(y / GRID_SIZE);
      if ((0 <= x && x < COL_COUNT) && (0 <= y && y < LINE_COUNT)) {
        return [x, y];
      }
      return null;
    },
    getScreenPos: function(x, y) {
      return [x * GRID_SIZE, y * GRID_SIZE];
    },
    removeBall: function(x, y) {
      var ball;
      if (!(ball = this.grid.get(x, y))) {
        return;
      }
      this.removeActor(ball);
      return this.grid.remove(x, y);
    },
    onMouseDown: function(b, x, y) {
      var gridPos, worldCoord;
      if (b !== gamvas.mouse.LEFT) {
        return;
      }
      worldCoord = this.camera.toWorld(x, y);
      gridPos = this.getGridPos(worldCoord.x, worldCoord.y);
      if (!gridPos) {
        return;
      }
      return this.gridPosClicks.push(gridPos);
    }
  });

  gamvas.event.addOnLoad(function() {
    gamvas.state.addState(new GameState('game'));
    return gamvas.start('lines-canvas', false);
  });

}).call(this);
