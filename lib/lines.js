// Generated by CoffeeScript 1.6.3
(function() {
  var ActiveBallState, Ball, COL_COUNT, GRID_SIZE, GameState, LINE_COUNT, UsualBallState;

  GRID_SIZE = 26;

  COL_COUNT = 9;

  LINE_COUNT = 9;

  ActiveBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setFile(gamvas.state.getCurrentState().resource.getImage('active_ball.png'));
    }
  });

  UsualBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setFile(gamvas.state.getCurrentState().resource.getImage('ball.png'));
    }
  });

  Ball = gamvas.Actor.extend({
    create: function(name, x, y) {
      this._super(name, x, y);
      this.addState(new ActiveBallState('active'));
      return this.addState(new UsualBallState('usual'), true);
    }
  });

  GameState = gamvas.State.extend({
    init: function() {
      var i, j, _i, _j;
      this.gridPosClicks = [];
      this.grid = {};
      for (i = _i = 0; 0 <= COL_COUNT ? _i < COL_COUNT : _i > COL_COUNT; i = 0 <= COL_COUNT ? ++_i : --_i) {
        for (j = _j = 0; 0 <= LINE_COUNT ? _j < LINE_COUNT : _j > LINE_COUNT; j = 0 <= LINE_COUNT ? ++_j : --_j) {
          this.addBall(i, j);
        }
      }
      return this.camera.setPosition(GRID_SIZE * COL_COUNT / 2, GRID_SIZE * LINE_COUNT / 2);
    },
    addBall: function(x, y) {
      var ball;
      ball = new Ball(false, x * GRID_SIZE, y * GRID_SIZE);
      this.addActor(ball);
      return this.grid["" + x + "_" + y] = ball;
    },
    draw: function() {
      var pos, x, y, _i, _len, _ref;
      _ref = this.gridPosClicks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos = _ref[_i];
        x = pos[0], y = pos[1];
        this.setActiveBall(this.getBallByGridPos(x, y));
      }
      return this.gridPosClicks = [];
    },
    getBallByGridPos: function(x, y) {
      return this.grid["" + x + "_" + y];
    },
    setActiveBall: function(ball) {
      var _ref;
      if ((_ref = this.activeBall) != null) {
        _ref.setState('usual');
      }
      this.activeBall = ball;
      return ball.setState('active');
    },
    getGridPos: function(x, y) {
      x = Math.floor(x / GRID_SIZE);
      y = Math.floor(y / GRID_SIZE);
      if ((0 <= x && x < COL_COUNT) && (0 <= y && y < LINE_COUNT)) {
        return [x, y];
      }
      return null;
    },
    onMouseDown: function(b, x, y) {
      var gridPos, worldCoord;
      if (b !== gamvas.mouse.LEFT) {
        return;
      }
      worldCoord = this.camera.toWorld(x, y);
      gridPos = this.getGridPos(worldCoord.x, worldCoord.y);
      if (!gridPos) {
        return;
      }
      return this.gridPosClicks.push(gridPos);
    }
  });

  gamvas.event.addOnLoad(function() {
    gamvas.state.addState(new GameState('game'));
    return gamvas.start('lines-canvas', false);
  });

}).call(this);
