// Generated by CoffeeScript 1.6.3
(function() {
  var ActiveBallState, BALL_ANIMATION_FPS, BALL_ANIMATION_FRAME_COUNT, BALL_COLORS, BALL_SIZE, Ball, BallGrid, CELL_SIZE, COL_COUNT, Cell, GameState, LINE_COUNT, UsualBallState;

  CELL_SIZE = 52;

  BALL_SIZE = 48;

  BALL_ANIMATION_FRAME_COUNT = 8;

  BALL_ANIMATION_FPS = 10;

  COL_COUNT = 9;

  LINE_COUNT = 9;

  BALL_COLORS = ['blue', 'brown', 'pink', 'red', 'teal', 'yellow'];

  ActiveBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setAnimation('active');
    }
  });

  UsualBallState = gamvas.ActorState.extend({
    enter: function() {
      return this.actor.setAnimation('usual');
    }
  });

  Ball = gamvas.Actor.extend({
    create: function(name, x, y, color) {
      var imageName, resource;
      this.color = color;
      this._super(name, x, y);
      imageName = this.color + '.png';
      resource = gamvas.state.getCurrentState().resource;
      this.addAnimation(new gamvas.Animation('active', resource.getImage(imageName), BALL_SIZE, BALL_SIZE, BALL_ANIMATION_FRAME_COUNT, BALL_ANIMATION_FPS));
      this.addAnimation(new gamvas.Animation('usual', resource.getImage(imageName), BALL_SIZE, BALL_SIZE, 1));
      this.addState(new ActiveBallState('active'));
      return this.addState(new UsualBallState('usual'), true);
    }
  });

  Cell = gamvas.Actor.extend({
    create: function(name, x, y) {
      this._super(name, x, y);
      return this.setFile(gamvas.state.getCurrentState().resource.getImage('cell.png'));
    }
  });

  BallGrid = (function() {
    BallGrid.prototype.LINE_DIRECTIONS = [[-1, 0], [-1, -1], [0, -1], [1, -1]];

    BallGrid.prototype.MIN_LINE_LENGTH = 5;

    BallGrid.prototype.REACHABLE_CELLS = [[-1, 0], [0, -1], [1, 0], [0, 1]];

    function BallGrid(width, height, parent) {
      this.width = width;
      this.height = height;
      this.parent = parent;
      this.container = this.getGrid(this.width);
      this.initCells();
    }

    BallGrid.prototype.initCells = function() {
      var cell, i, j, x, y, _i, _ref, _results;
      this.cells = this.getGrid(this.width);
      _results = [];
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _ref2, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            _ref2 = this.parent.getCellPos(i, j), x = _ref2[0], y = _ref2[1];
            cell = new Cell(false, x, y);
            this.cells[i][j] = cell;
            _results1.push(this.parent.addActor(cell));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BallGrid.prototype.getGrid = function(width) {
      var i, res, _i;
      res = [];
      for (i = _i = 0; 0 <= width ? _i < width : _i > width; i = 0 <= width ? ++_i : --_i) {
        res.push([]);
      }
      return res;
    };

    BallGrid.prototype.add = function(x, y, ball) {
      this.container[x][y] = ball;
      return this.checkLinesRemovalInPosition(x, y);
    };

    BallGrid.prototype.remove = function(x, y) {
      return this.container[x][y] = null;
    };

    BallGrid.prototype.get = function(x, y) {
      return this.container[x][y];
    };

    BallGrid.prototype.getFreePositions = function() {
      var i, j, res, _i, _j, _ref, _ref1;
      res = [];
      for (i = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        for (j = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          if (!this.container[i][j]) {
            res.push([i, j]);
          }
        }
      }
      return res;
    };

    BallGrid.prototype.checkLinesRemovalInPosition = function(x, y) {
      var color, dirCount, dx, dy, line, linesToRemove, oppositeDirCount, startX, startY, totalCount, _i, _j, _len, _len1, _ref, _ref1, _results;
      color = this.container[x][y].color;
      linesToRemove = [];
      _ref = this.LINE_DIRECTIONS;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], dx = _ref1[0], dy = _ref1[1];
        dirCount = this.getMaxBallCount(x, y, dx, dy, color);
        oppositeDirCount = this.getMaxBallCount(x, y, -dx, -dy, color);
        totalCount = dirCount + oppositeDirCount + 1;
        if (totalCount < this.MIN_LINE_LENGTH) {
          continue;
        }
        startX = x + dx * dirCount;
        startY = y + dy * dirCount;
        linesToRemove.push([startX, startY, -dx, -dy, totalCount]);
      }
      _results = [];
      for (_j = 0, _len1 = linesToRemove.length; _j < _len1; _j++) {
        line = linesToRemove[_j];
        _results.push(this.removeLine.apply(this, line));
      }
      return _results;
    };

    BallGrid.prototype.getMaxBallCount = function(x, y, dx, dy, neededColor) {
      var ball, res;
      res = 0;
      x += dx;
      y += dy;
      while ((0 <= x && x < this.width) && (0 <= y && y < this.height) && (ball = this.container[x][y]) && (ball.color === neededColor)) {
        res++;
        x += dx;
        y += dy;
      }
      return res;
    };

    BallGrid.prototype.removeLine = function(startX, startY, dx, dy, count) {
      var curX, curY, i, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= count ? _i <= count : _i >= count; i = 1 <= count ? ++_i : --_i) {
        if (typeof curX !== "undefined" && curX !== null) {
          curX += dx;
        } else {
          curX = startX;
        }
        if (typeof curY !== "undefined" && curY !== null) {
          curY += dy;
        } else {
          curY = startY;
        }
        _results.push(this.parent.removeBall(curX, curY));
      }
      return _results;
    };

    BallGrid.prototype.getReachGrid = function(x, y) {
      var cellQueue, dx, dy, newX, newY, nextStepCount, res, _i, _len, _ref, _ref1, _ref2;
      res = this.getGrid(this.width);
      res[x][y] = 0;
      cellQueue = [[x, y]];
      while (cellQueue.length) {
        _ref = cellQueue.shift(), x = _ref[0], y = _ref[1];
        nextStepCount = res[x][y] + 1;
        _ref1 = this.REACHABLE_CELLS;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _ref2 = _ref1[_i], dx = _ref2[0], dy = _ref2[1];
          newX = x + dx;
          newY = y + dy;
          if (!((0 <= newX && newX < this.width)) || !((0 <= newY && newY < this.height))) {
            continue;
          }
          if (res[newX][newY] !== void 0) {
            continue;
          }
          if (this.container[newX][newY]) {
            continue;
          }
          res[newX][newY] = nextStepCount;
          cellQueue.push([newX, newY]);
        }
      }
      return res;
    };

    BallGrid.prototype.canReach = function(startX, startY, endX, endY) {
      var grid;
      grid = this.getReachGrid(startX, startY);
      return grid[endX][endY] != null;
    };

    return BallGrid;

  })();

  GameState = gamvas.State.extend({
    init: function() {
      this.gridPosClicks = [];
      this.grid = new BallGrid(COL_COUNT, LINE_COUNT, this);
      this.addRandomBalls(5);
      return this.camera.setPosition(CELL_SIZE * COL_COUNT / 2, CELL_SIZE * LINE_COUNT / 2);
    },
    addRandomBalls: function(num) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 1; 1 <= num ? _i <= num : _i >= num; i = 1 <= num ? ++_i : --_i) {
        _results.push(this.addRandomBall());
      }
      return _results;
    },
    addRandomBall: function() {
      var color, colorIndex, freePositions, posIndex, x, y, _ref;
      freePositions = this.grid.getFreePositions();
      posIndex = Math.floor(Math.random() * freePositions.length);
      _ref = freePositions[posIndex], x = _ref[0], y = _ref[1];
      colorIndex = Math.floor(Math.random() * BALL_COLORS.length);
      color = BALL_COLORS[colorIndex];
      return this.addBall(x, y, color);
    },
    addBall: function(x, y, color) {
      var ball, screenX, screenY, _ref;
      _ref = this.getBallPos(x, y), screenX = _ref[0], screenY = _ref[1];
      ball = new Ball(false, screenX, screenY, color);
      this.addActor(ball);
      return this.grid.add(x, y, ball);
    },
    removeBall: function(x, y) {
      var ball;
      if (!(ball = this.grid.get(x, y))) {
        return;
      }
      this.removeActor(ball);
      return this.grid.remove(x, y);
    },
    draw: function() {
      var activeX, activeY, ball, pos, x, y, _i, _len, _ref, _ref1;
      _ref = this.gridPosClicks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pos = _ref[_i];
        x = pos[0], y = pos[1];
        if (ball = this.grid.get(x, y)) {
          this.setActiveBall(ball);
        } else if (this.activeBall) {
          _ref1 = this.getGridPos(this.activeBall.position.x, this.activeBall.position.y), activeX = _ref1[0], activeY = _ref1[1];
          if (!this.grid.canReach(activeX, activeY, x, y)) {
            continue;
          }
          this.setBallPos(this.activeBall, x, y);
          this.setActiveBall(null);
          this.addRandomBalls(3);
        }
      }
      return this.gridPosClicks = [];
    },
    setActiveBall: function(ball) {
      var _ref;
      if ((_ref = this.activeBall) != null) {
        _ref.setState('usual');
      }
      this.activeBall = ball;
      return ball != null ? ball.setState('active') : void 0;
    },
    setBallPos: function(ball, x, y) {
      var oldX, oldY, screenX, screenY, _ref, _ref1;
      _ref = this.getGridPos(ball.position.x, ball.position.y), oldX = _ref[0], oldY = _ref[1];
      this.grid.remove(oldX, oldY);
      _ref1 = this.getBallPos(x, y), screenX = _ref1[0], screenY = _ref1[1];
      ball.setPosition(screenX, screenY);
      return this.grid.add(x, y, ball);
    },
    getGridPos: function(x, y) {
      x = Math.floor(x / CELL_SIZE);
      y = Math.floor(y / CELL_SIZE);
      if ((0 <= x && x < COL_COUNT) && (0 <= y && y < LINE_COUNT)) {
        return [x, y];
      }
      return null;
    },
    getCellPos: function(x, y) {
      return [x * CELL_SIZE, y * CELL_SIZE];
    },
    getBallPos: function(x, y) {
      var offset, resX, resY, _ref;
      _ref = this.getCellPos(x, y), resX = _ref[0], resY = _ref[1];
      offset = (CELL_SIZE - BALL_SIZE) / 2;
      return [resX + offset, resY + offset];
    },
    onMouseDown: function(b, x, y) {
      var gridPos, worldCoord;
      if (b !== gamvas.mouse.LEFT) {
        return;
      }
      worldCoord = this.camera.toWorld(x, y);
      gridPos = this.getGridPos(worldCoord.x, worldCoord.y);
      if (!gridPos) {
        return;
      }
      return this.gridPosClicks.push(gridPos);
    }
  });

  gamvas.event.addOnLoad(function() {
    gamvas.state.addState(new GameState('game'));
    return gamvas.start('lines-canvas', false);
  });

}).call(this);
